from seleniumbase import Driver
from bs4 import BeautifulSoup
from aiogram.types import CallbackQuery, FSInputFile

import pandas as pd
import asyncio
import time
import re
from datetime import datetime as dt
import json
from os import remove


class YandexMarketParser:
    def __init__(self, aiogram_call: CallbackQuery=None) -> None:
        self.key_word = ''
        self.key_words = []
        self.full_prices_list = {}
        self.discount_prices_list = {}
        self.discounts_list = {}
        self.pages_data = {}
        self.products_list = []
        self.aiogram_call = aiogram_call
        self.driver = None

    async def get_html_of_the_page(self, url: str, do_not_scroll=False) -> str:
        if not self.driver:
            self.driver = Driver(uc=True, headless=True)
        self.driver.get(url)
        if not do_not_scroll:
            SCROLL_PAUSE_TIME = 2
            last_height = self.driver.execute_script("return document.body.scrollHeight")
            while True:
                self.driver.execute_script("window.scrollTo(0, document.body.scrollHeight);")
                time.sleep(SCROLL_PAUSE_TIME)
                new_height = self.driver.execute_script("return document.body.scrollHeight")
                if new_height == last_height:
                    break
                last_height = new_height
        page_html = str(self.driver.page_source)
        return page_html
    
    async def get_amount_of_pages(self, html: str) -> None:
        soup = BeautifulSoup(html, "html.parser")
        try:
            divs = soup.find('div', class_='_2Y-DM').find('div', class_='B-RPM').find_all('div')
            for div in divs:
                try:
                    num = int(div.find('div').get_text().strip())
                except Exception:
                    continue
                if num > 1 and num not in self.pages_data:
                    self.pages_data[num] = (False, f'https://market.yandex.ru/search?text={self.key_word}&page={num}')
        except Exception:
            pass

    async def parse_page_content(self, html: str) -> None:
        soup = BeautifulSoup(html, "html.parser")
        products_blocks = soup.find('main', id='searchResults', attrs={'aria-label': '–†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ–∏—Å–∫–∞'}).find_all("div", attrs={"data-index": True})
        for products_block in products_blocks:
            if int(products_block.get("data-index")) > 0:
                try:
                    link = 'https://market.yandex.ru' + products_block.find('article').find('a').get('href')
                    full_name = products_block.find('div', class_='_1GfBD').find('h3').find('a').find('span').get_text().strip()
                    words = full_name.lower().replace('"', '').split()
                    list_of_words = []
                    for word in words:
                        list_of_words += word.split('-')
                    flag = True
                    for key_word in self.key_words:
                        if key_word not in list_of_words:
                            flag = False
                            break
                    if not flag or ('–º–∞—Ç—Ä–∞—Ü' in words and '–∫' in words):
                        continue
                    prices_html_block = products_block.find('div', class_='UZf17').find('div', class_='_2p_cb').find('a')
                    prices_in_span_tag = prices_html_block.find_all('span')
                    prices_in_h3_tag = prices_html_block.find_all('h3')
                    prices_in_all_tags = prices_in_span_tag + prices_in_h3_tag
                    prices = list(map(int, list(filter(lambda el: el.isdigit(), list(map(lambda el: re.sub(r'[^\x00-\x7f]', '', el.get_text().strip().replace(' ', '').replace(':', '')), prices_in_all_tags))))))
                    full_price, discount_price = max(prices), min(prices)
                    discount = full_price - discount_price
                    if self.discount_prices_list:
                        middle_discount_price = int(sum(self.discount_prices_list) / len(self.discount_prices_list))
                    else:
                        middle_discount_price = 0
                    if middle_discount_price and discount_price + 0.41 * middle_discount_price < middle_discount_price:
                        continue
                    product_data = {'–°—Å—ã–ª–∫–∞': link,
                                    '–ê—Ä—Ç–∏–∫—É–ª': '-',
                                    '–ù–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ': full_name,
                                    '–ü—Ä–æ–¥–∞–≤–µ—Ü': '-',
                                    '–¶–µ–Ω–∞ –±–µ–∑ —Å–∫–∏–¥–∫–∏': '-',
                                    '–¶–µ–Ω–∞ —Å–æ —Å–∫–∏–¥–∫–æ–π': '-',
                                    '–†–∞–∑–º–µ—Ä —Å–∫–∏–¥–∫–∏': '-'}
                    try:
                        product_id = json.loads(products_block.find('article').get('data-zone-data'))['skuId']
                        if not product_id.isdigit():
                            continue
                    except Exception:
                        product_id = None
                    try:
                        product_seller = products_block.find('div', attrs={'data-zone-name': 'shop-name'}).find('span').get_text()
                    except Exception:
                        product_seller = None
                    if product_id:
                        product_data['–ê—Ä—Ç–∏–∫—É–ª'] = product_id
                    if product_seller:
                        product_data['–ü—Ä–æ–¥–∞–≤–µ—Ü'] = product_seller
                    if full_price:
                        self.full_prices_list[full_price] = link
                        product_data['–¶–µ–Ω–∞ –±–µ–∑ —Å–∫–∏–¥–∫–∏'] = full_price
                    if discount_price:
                        self.discount_prices_list[discount_price] = link
                        product_data['–¶–µ–Ω–∞ —Å–æ —Å–∫–∏–¥–∫–æ–π'] = discount_price
                    if discount:
                        self.discounts_list[discount] = link
                        product_data['–†–∞–∑–º–µ—Ä —Å–∫–∏–¥–∫–∏'] = discount
                    self.products_list.append(product_data)
                except Exception:
                    pass

    async def save_to_excel(self, file_name: str) -> str:
        data = pd.DataFrame(self.products_list)
        result_path = f"{file_name}.xlsx"
        writer = pd.ExcelWriter(result_path)
        data.to_excel(writer, 'data', index=False)
        writer.close()
        return result_path

    async def run_parser(self, key_word=None) -> None:
        if not key_word:
            self.key_word = input("–í–≤–µ–¥–∏—Ç–µ –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞ –¥–ª—è –ø–æ–∏—Å–∫–∞ —Ç–æ–≤–∞—Ä–∞: ")
        else:
            self.key_word = key_word
        for word in self.key_word.lower().split():
            self.key_words += word.split('-')
        if self.aiogram_call:
            await self.aiogram_call.message.edit_text(text=f"üîó –ó–∞–≥—Ä—É–∂–∞—é —Ç–æ–≤–∞—Ä—ã —Å–æ —Å—Ç—Ä–∞–Ω–∏—Ü!")
        search_url = f'https://market.yandex.ru/search?text={self.key_word}'
        try:
            first_page_html = await self.get_html_of_the_page(search_url)
        except Exception:
            print(f'–ù–µ—É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–æ–≤–∞—Ä–µ {self.key_word} :(')
            return
        self.pages_data[1] = (True, first_page_html)
        await self.get_amount_of_pages(first_page_html)
        for page_num in self.pages_data:
            if not self.pages_data[page_num][0]:
                try:
                    page_html = await self.get_html_of_the_page(self.pages_data[page_num][1])
                    self.pages_data[page_num] = (True, page_html)
                except Exception:
                    pass
        if self.aiogram_call:
            await self.aiogram_call.message.edit_text(text=f"‚ö™Ô∏è –û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é —Ç–æ–≤–∞—Ä—ã!")
        for page_num in self.pages_data:
            if self.pages_data[page_num][0]:
                await self.parse_page_content(self.pages_data[page_num][1])
        self.driver.quit()
        self.driver = None
        table_path = await self.save_to_excel(f'{self.key_word}_{dt.now().strftime("%Y-%m-%d-%H-%M-%S")}')
        table_aiogram = FSInputFile(path=table_path)
        time = dt.now().strftime("%Y-%m-%d %H:%M")
        if not self.aiogram_call:
            print(f'–ù–∞ –º–æ–º–µ–Ω—Ç –≤—Ä–µ–º–µ–Ω–∏: {time}')
        if len(self.discount_prices_list) > 1:
            max_discount_price, middle_discount_price, min_discount_price = max(self.discount_prices_list), int(sum(self.discount_prices_list) / len(self.discount_prices_list)), min(self.discount_prices_list)
            link_at_max_discount_price, link_at_min_discount_price = self.discount_prices_list[max_discount_price], self.discount_prices_list[min_discount_price]
            max_full_price, middle_full_price, min_full_price = max(self.full_prices_list), int(sum(self.full_prices_list) / len(self.full_prices_list)), min(self.full_prices_list)
            link_at_max_full_price, link_at_min_full_price = self.full_prices_list[max_full_price], self.full_prices_list[min_full_price]
            max_discount, middle_discount, min_discount = max(self.discounts_list), int(sum(self.discounts_list) / len(self.discounts_list)), min(self.discounts_list)
            link_at_max_discount, link_at_min_discount = self.discounts_list[max_discount], self.discounts_list[min_discount]
            if self.aiogram_call:
                await self.aiogram_call.message.answer_document(
                    document=table_aiogram,
                    caption=f'‚ÑπÔ∏è –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ç–æ–≤–∞—Ä–µ *{self.key_word}*\n\n‚ùå [–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è —Å–∫–∏–¥–æ—á–Ω–∞—è —Ü–µ–Ω–∞ (—Ü–µ–Ω–∞ –ø—Ä–æ–¥–∞–∂–∏): {max_discount_price}]({link_at_max_discount_price})\nüî∂ –°—Ä–µ–¥–Ω—è—è —Å–∫–∏–¥–æ—á–Ω–∞—è —Ü–µ–Ω–∞ (—Ü–µ–Ω–∞ –ø—Ä–æ–¥–∞–∂–∏): {middle_discount_price}\n‚úÖ [–ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Å–∫–∏–¥–æ—á–Ω–∞—è —Ü–µ–Ω–∞ (—Ü–µ–Ω–∞ –ø—Ä–æ–¥–∞–∂–∏): {min_discount_price}]({link_at_min_discount_price})\n\n[üü• –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –ø–æ–ª–Ω–∞—è —Ü–µ–Ω–∞: {max_full_price}]({link_at_max_full_price})\nüüß –°—Ä–µ–¥–Ω—è—è –ø–æ–ª–Ω–∞—è —Ü–µ–Ω–∞: {middle_full_price}\n[üü© –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è –ø–æ–ª–Ω–∞—è —Ü–µ–Ω–∞: {min_full_price}]({link_at_min_full_price})\n\n[üü¢ –ú–∞–∫—Å–∏–º–∞–ª—å–∞—è —Å–∫–∏–¥–∫–∞: {max_discount}]({link_at_max_discount})\nüü† –°—Ä–µ–¥–Ω—è—è —Å–∫–∏–¥–∫–∞: {middle_discount}\n[üî¥ –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Å–∫–∏–¥–∫–∞: {min_discount}]({link_at_min_discount})',
                    parse_mode='markdown'
                )
                await self.aiogram_call.message.delete()
            else:
                print(f'‚ùå –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è —Å–∫–∏–¥–æ—á–Ω–∞—è —Ü–µ–Ω–∞ (—Ü–µ–Ω–∞ –ø—Ä–æ–¥–∞–∂–∏): {max_discount_price}')
                print(f'üî∂ –°—Ä–µ–¥–Ω—è—è —Å–∫–∏–¥–æ—á–Ω–∞—è —Ü–µ–Ω–∞ (—Ü–µ–Ω–∞ –ø—Ä–æ–¥–∞–∂–∏): {middle_discount_price}')
                print(f'‚úÖ –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Å–∫–∏–¥–æ—á–Ω–∞—è —Ü–µ–Ω–∞ (—Ü–µ–Ω–∞ –ø—Ä–æ–¥–∞–∂–∏): {min_discount_price}')
                print(f'üü• –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –ø–æ–ª–Ω–∞—è —Ü–µ–Ω–∞: {max_full_price}')
                print(f'üüß –°—Ä–µ–¥–Ω—è—è –ø–æ–ª–Ω–∞—è —Ü–µ–Ω–∞: {middle_full_price}')
                print(f'üü© –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è –ø–æ–ª–Ω–∞—è —Ü–µ–Ω–∞: {min_full_price}')
                print(f'üü¢ –ú–∞–∫—Å–∏–º–∞–ª—å–∞—è —Å–∫–∏–¥–∫–∞: {max_discount}')
                print(f'üü† –°—Ä–µ–¥–Ω—è—è —Å–∫–∏–¥–∫–∞: {middle_discount}')
                print(f'üî¥ –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Å–∫–∏–¥–∫–∞: {min_discount}')
        elif len(self.discount_prices_list) == 1:
            discount_price, full_price, discount = list(self.discount_prices_list.keys())[0], list(self.full_prices_list.keys())[0], list(self.discounts_list.keys())[0]
            link = self.discount_prices_list[discount_price]
            if self.aiogram_call:
                await self.aiogram_call.message.answer_document(
                    document=table_aiogram,
                    caption=f'–í –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö –±—ã–ª —Å–æ—Ö—Ä–∞–Ω–µ–Ω —Ç–æ–ª—å–∫–æ 1 [—Ç–æ–≤–∞—Ä\n\nüü¢ —Å–∫–∏–¥–æ—á–Ω–∞—è —Ü–µ–Ω–∞ (—Ü–µ–Ω–∞ –ø—Ä–æ–¥–∞–∂–∏): {discount_price}\nüî¥ –ü–æ–ª–Ω–∞—è —Ü–µ–Ω–∞: {full_price}\nüü† C–∫–∏–¥–∫–∞: {discount}]({link})',
                    parse_mode='markdown'
                )
                await self.aiogram_call.message.delete()
            else:
                print('‚ÑπÔ∏è –í –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö –±—ã–ª —Å–æ—Ö—Ä–∞–Ω–µ–Ω —Ç–æ–ª—å–∫–æ 1 —Ç–æ–≤–∞—Ä')
                print(f'üü¢ –°–∫–∏–¥–æ—á–Ω–∞—è —Ü–µ–Ω–∞ (—Ü–µ–Ω–∞ –ø—Ä–æ–¥–∞–∂–∏): {discount_price}')
                print(f'üî¥ –ü–æ–ª–Ω–∞—è —Ü–µ–Ω–∞: {full_price}')
                print(f'üü† C–∫–∏–¥–∫–∞: {discount}')
        else:
            if self.aiogram_call:
                await self.aiogram_call.message.answer(
                    text=f'–ü–∞—Ä—Å–µ—Ä—É *–Ω–µ —É–¥–∞–ª–æ—Å—å* –Ω–∞–π—Ç–∏ –Ω–µ –æ–¥–Ω–æ–≥–æ —Ç–æ–≤–∞—Ä–∞, —Å–æ–æ—Ç–≤–µ—Ç—Å–≤—É—é—â–µ–≥–æ *–¥–∞–Ω–Ω–æ–º—É* –æ–ø–∏—Å–∞–Ω–∏—é :(',
                    parse_mode='markdown'
                )
                await self.aiogram_call.message.delete()
            else:
                print('‚ÑπÔ∏è –ü–∞—Ä—Å–µ—Ä—É –Ω–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –Ω–µ –æ–¥–Ω–æ–≥–æ —Ç–æ–≤–∞—Ä–∞, —Å–æ–æ—Ç–≤–µ—Ç—Å–≤—É—é—â–µ–≥–æ –¥–∞–Ω–Ω–æ–º—É –æ–ø–∏—Å–∞–Ω–∏—é :(')
        try:
            remove(table_path)
        except Exception:
            pass


if __name__ == '__main__':
    ym_parser = YandexMarketParser()
    asyncio.run(ym_parser.run_parser('–≤–∏—Ç–∞—Ñ–æ–Ω 5'))
